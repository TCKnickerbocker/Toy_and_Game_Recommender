version: "2.31.0"

services:
  #   frontend:
  #     build:
  #       context: .
  #       dockerfile: docker/frontend/Dockerfile
  #     ports:
  #       - "3000:3000"
  #     networks:
  #       - app-network
  #     depends_on:
  #       - api

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      - model_1
      - generate_new_products
      - model_2
      - model_3
      - model_4
    environment:
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - APP_SECRET_KEY=${APP_SECRET_KEY}

  model_1:
    build:
      context: .
      dockerfile: docker/model_1/Dockerfile
    ports:
      - "5003:5003"
      - "9100:9100"
    environment:
      - METRICS_PORT=9100
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  generate_new_products:
    build:
      context: .
      dockerfile: docker/generate_new_products/Dockerfile
    ports:
      - "5007:5007"
      - "9101:9101"
    environment:
      - METRICS_PORT=9101
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  model_2:
    build:
      context: .
      dockerfile: docker/model_2/Dockerfile
    ports:
      - "5004:5004"
      - "9102:9102"
    environment:
      - METRICS_PORT=9102
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  model_3:
    build:
      context: .
      dockerfile: docker/model_3/Dockerfile
    ports:
      - "5005:5005"
      - "9103:9103"
    environment:
      - METRICS_PORT=9103
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  model_4:
    build:
      context: .
      dockerfile: docker/model_4/Dockerfile
    ports:
      - "5006:5006"
      - "9104:9104"
    environment:
      - METRICS_PORT=9104
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  prometheus:
    build:
      context: .
      dockerfile: docker/monitoring/prometheus/Dockerfile
    ports:
      - "9090:9090"
      - "9091:9091"
    volumes:
      - ./docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--web.listen-address=:9090" # Ensure Prometheus listens on port 9090 for scraping
      - "--web.external-url=http://localhost:9090"
      - "--web.enable-lifecycle"
  # grafana:
  #   build:
  #     context: .
  #     dockerfile: docker/monitoring/grafana/Dockerfile
  #   ports:
  #     - "3001:3000"
  #   networks:
  #     - monitoring-network
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
  #     - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge
